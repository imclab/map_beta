// Generated by CoffeeScript 1.3.3
(function() {
  var PropertyData, USMap, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  PropertyData = function() {
    var all, calculate_cap, cap_rate, clean, data, dimensions, filterData, handleSlide, op_expense, pdata, setupDimensions, setupRangedSliders, setupSliders, stats;
    data = null;
    all = null;
    dimensions = {};
    op_expense = 0.2;
    cap_rate = 0.08;
    filterData = {
      "building_rsf": {
        min: 3000,
        max: 4500000,
        values: [3000, 4500000],
        ticks: [3000, 4820, 6000, 7030, 8000, 9090, 10150, 11430, 12740, 14320, 16200, 18300, 20350, 22670, 25000, 28140, 30380, 33710, 37180, 41720, 46260, 50400, 55000, 59850, 64490, 72270, 80000, 89530, 99920, 108700, 121250, 135420, 151930, 175110, 202880, 235000, 278810, 333360, 421160, 572470, 4500000],
        prefix: "",
        suffix: ""
      },
      "government_leased": {
        min: 0,
        max: 100,
        values: [0, 100],
        ticks: [0, 2.5, 5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25, 27.5, 30, 32.5, 35, 37.5, 40, 42.5, 45, 47.5, 50, 52.5, 55, 57.5, 60, 62.5, 65, 67.5, 70, 72.5, 75, 77.5, 80, 82.5, 85, 87.5, 90, 92.5, 95, 97.5, 100],
        prefix: "",
        suffix: "%"
      },
      "government_rsf": {
        min: 3000,
        max: 2400000,
        values: [3000, 2400000],
        ticks: [3000, 3380, 3750, 4080, 4440, 4850, 5170, 5590, 6000, 6350, 6810, 7220, 7630, 8050, 8560, 9090, 9600, 10100, 10770, 11500, 12160, 12990, 14000, 14970, 16240, 17700, 19250, 21100, 23200, 25740, 29560, 33320, 38130, 45560, 53110, 64040, 78200, 99200, 134260, 217420, 2400000],
        prefix: "",
        suffix: ""
      },
      "remaining_total_term": {
        min: 0,
        max: 20,
        values: [0, 20],
        ticks: [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.5, 13, 13.5, 14, 14.5, 15, 15.5, 16, 16.5, 17, 17.5, 18, 18.5, 19, 19.5, 20],
        prefix: "",
        suffix: ""
      },
      "remaining_firm_term": {
        min: 0,
        max: 20,
        values: [0, 20],
        ticks: [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.5, 13, 13.5, 14, 14.5, 15, 15.5, 16, 16.5, 17, 17.5, 18, 18.5, 19, 19.5, 20],
        prefix: "",
        suffix: ""
      },
      "total_rent": {
        min: 0,
        max: 71500000,
        values: [0, 71500000],
        ticks: [0, 53690, 67740, 78390, 88300, 97050, 105530, 113830, 123480, 132240, 144560, 154590, 168750, 180050, 192630, 206180, 221160, 238130, 254620, 272200, 297490, 318000, 342890, 371210, 403260, 437950, 479430, 525080, 581990, 649160, 729410, 829540, 975030, 1161940, 1409830, 1710560, 2127740, 2611850, 3392270, 6305710, 71500000],
        prefix: "$",
        suffix: ""
      },
      "rent_prsf": {
        min: 0,
        max: 90,
        values: [0, 90],
        ticks: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 65, 66, 68, 72, 74, 78, 82, 86, 90],
        prefix: "",
        suffix: ""
      }
    };
    clean = function(rawData) {
      var fields;
      fields = ["bldg_rsf", "percent_govt_leased", "total_leased_rsf", "remaining_total_term", "remaining_firm_term", "total_annual_rent", "rent_prsf"];
      rawData.forEach(function(d) {
        return fields.forEach(function(f) {
          return d[f] = parseFloat(d[f]);
        });
      });
      return rawData;
    };
    stats = function(data) {
      var fields;
      fields = ["bldg_rsf", "percent_govt_leased", "total_leased_rsf", "remaining_total_term", "remaining_firm_term", "total_annual_rent", "rent_prsf"];
      fields.forEach(function(field) {
        var ext, nums, quants, val, vals, x, _i;
        ext = d3.extent(data, function(d) {
          return d[field];
        });
        nums = data.map(function(d) {
          return d[field];
        });
        nums.sort(d3.ascending);
        quants = [];
        for (x = _i = 0; _i <= 40; x = _i += 1) {
          val = x / 40.0;
          quants.push(val);
        }
        vals = [];
        return quants.forEach(function(i) {
          var q;
          q = Math.round(d3.quantile(nums, i) / 10) * 10;
          return vals.push(q);
        });
      });
      return data;
    };
    pdata = function(rawData) {
      rawData = clean(rawData);
      data = crossfilter(rawData);
      all = data.groupAll();
      setupDimensions();
      return setupRangedSliders();
    };
    setupRangedSliders = function() {
      d3.entries(filterData).forEach(function(entry) {
        var selectClass, selecter, sliderId;
        sliderId = "#slider_" + entry.key;
        selectClass = "select_" + entry.key;
        selecter = d3.select(sliderId).append("select").attr("class", selectClass).style("display", "none");
        selecter.selectAll("option").data(entry.value.ticks).enter().append("option").attr("value", function(d) {
          return d;
        }).attr("selected", function(d) {
          if (entry.value.values[0] === d) {
            return "selected";
          } else {
            return null;
          }
        }).text(function(d) {
          return entry.value.prefix + fixUp(d) + entry.value.suffix;
        });
        selecter = d3.select(sliderId).append("select").attr("class", selectClass).style("display", "none");
        selecter.selectAll("option").data(entry.value.ticks).enter().append("option").attr("value", function(d) {
          return d;
        }).attr("selected", function(d) {
          if (entry.value.values[1] === d) {
            return "selected";
          } else {
            return null;
          }
        }).text(function(d) {
          return d;
        });
        return $("." + selectClass).selectToUISlider({
          labels: 0,
          callback: 'custom_slide'
        });
      });
      return $(root).bind('custom_slide', handleSlide);
    };
    setupSliders = function() {
      return d3.entries(filterData).forEach(function(entry) {
        var sliderId;
        sliderId = "#slider_" + entry.key;
        return $(sliderId).slider({
          range: true,
          min: entry.value.min,
          max: entry.value.max,
          values: entry.value.values,
          slide: handleSlide
        });
      });
    };
    handleSlide = function(event, sliderId, values) {
      var max, min;
      sliderId = sliderId.replace("slider_", "");
      min = parseFloat(values[0]) - 1;
      max = parseFloat(values[1]) + 1;
      dimensions[sliderId].filter([min, max]);
      return $(root).trigger('filterupdate');
    };
    setupDimensions = function() {
      dimensions.building_rsf = data.dimension(function(d) {
        return d.bldg_rsf;
      });
      dimensions.government_leased = data.dimension(function(d) {
        return parseFloat(d.percent_govt_leased);
      });
      dimensions.government_rsf = data.dimension(function(d) {
        return d.total_leased_rsf;
      });
      dimensions.remaining_total_term = data.dimension(function(d) {
        return d.remaining_total_term;
      });
      dimensions.remaining_firm_term = data.dimension(function(d) {
        return d.remaining_firm_term;
      });
      dimensions.total_rent = data.dimension(function(d) {
        return d.total_annual_rent;
      });
      dimensions.rent_prsf = data.dimension(function(d) {
        return d.rent_prsf;
      });
      return d3.entries(filterData).forEach(function(entry) {
        var max, min;
        min = entry.value.values[0] - 1;
        max = entry.value.values[1] + 1;
        return dimensions[entry.key].filter([min, max]);
      });
    };
    pdata.data = function() {
      if (dimensions.building_rsf) {
        return dimensions.building_rsf.top(Infinity);
      } else {
        return [];
      }
    };
    pdata.capRate = function(_) {
      if (!arguments.length) {
        return cap_rate;
      }
      cap_rate = _;
      return pdata;
    };
    pdata.opExpense = function(_) {
      if (!arguments.length) {
        return op_expense;
      }
      op_expense = _;
      return pdata;
    };
    pdata.total_rsf = function() {
      if (all) {
        return all.reduceSum(function(d) {
          return d.total_leased_rsf;
        }).value();
      } else {
        return 0;
      }
    };
    calculate_cap = function(rent) {
      var noi;
      noi = rent - (rent * op_expense);
      return noi / cap_rate;
    };
    pdata.total_cap_value = function() {
      if (all) {
        return all.reduceSum(function(d) {
          return calculate_cap(d.total_annual_rent);
        }).value();
      } else {
        return 0;
      }
    };
    return pdata;
  };

  USMap = function() {
    var circle, circleRadius, circles, data, dimensions, filters, height, hide_details, labels, path, projection, render_states, show_details, states, tooltip, update, usmap, width,
      _this = this;
    width = 620;
    height = 430;
    data = null;
    dimensions = null;
    filters = null;
    circles = null;
    circle = [];
    states = null;
    labels = null;
    projection = null;
    projection = d3.geo.albersUsa();
    path = d3.geo.path();
    tooltip = null;
    circleRadius = 4;
    usmap = function(selection) {
      tooltip = CustomTooltip("map_tooltip", 240);
      return selection.each(function(rawData) {
        var g, gEnter, svg;
        data = rawData;
        projection.scale(width * 1.2).translate([10, 0]);
        path.projection(projection);
        svg = d3.select(this).selectAll("svg").data([data]);
        gEnter = svg.enter().append("svg").append("g");
        svg.attr("width", width);
        svg.attr("height", height);
        svg.append("rect").attr("class", "background").attr("width", width).attr("height", height);
        g = svg.insert("g").attr("transform", "translate(" + (width / 2) + "," + (height / 2) + ")");
        states = g.append("g").attr("id", "states");
        labels = g.append("g").attr("id", "state-labels");
        circles = g.append("g").attr("id", "circles");
        d3.json("data/us-states.json", render_states);
        return update();
      });
    };
    usmap.update = function(newData) {
      data = newData;
      return update();
    };
    update = function() {
      var positions;
      positions = [];
      data.forEach(function(d) {
        var location;
        location = [d.longitude, d.latitude];
        return positions.push(projection(location));
      });
      circle = circles.selectAll("circle").data(data, function(d) {
        return "" + d.longitude + "," + d.latitude;
      });
      circle.enter().append("circle").attr("class", "location").attr("cx", function(d, i) {
        return positions[i][0];
      }).attr("cy", function(d, i) {
        return positions[i][1];
      }).attr("r", circleRadius).on("mouseover", function(d, i) {
        return show_details(d, i, this);
      }).on("mouseout", function(d, i) {
        return hide_details(d, i, this);
      });
      return circle.exit().remove();
    };
    show_details = function(data, i, element) {
      var content;
      d3.select(element).classed("active", true);
      content = "<p class=\"main\">" + data.city + ", " + data.state + "</p><hr class=\"tooltip-hr\">";
      content += "<span class=\"name\">Lease RSF:</span><span class=\"value\"> " + (fixUp(data.total_leased_rsf)) + "</span><br/>";
      content += "<span class=\"name\">% Govt Leased:</span><span class=\"value\"> " + (fixUp(data.percent_govt_leased)) + "%</span><br/>";
      content += "<span class=\"name\">Rent/RSF:</span><span class=\"value\"> $" + (fixUp(data.rent_prsf)) + "</span><br/>";
      content += "<span class=\"name\">Remaining Term (Yrs):</span><span class=\"value\"> " + (fixUp(data.remaining_total_term)) + "</span><br/>";
      return tooltip.showTooltip(content, d3.event);
    };
    hide_details = function(data, i, element) {
      d3.select(element).classed("active", false);
      return tooltip.hideTooltip();
    };
    render_states = function(states_json) {
      return states.selectAll("path").data(states_json.features).enter().append("path").attr("d", path);
    };
    return usmap;
  };

  root.plotData = function(selector, data, plot) {
    return d3.select(selector).datum(data).call(plot);
  };

  $(function() {
    var display, my_data, my_map, setCapRate, setOpExpense;
    my_map = USMap();
    my_data = PropertyData();
    root.update = function() {
      var filteredData;
      filteredData = my_data.data();
      $("#metric_locations").text(addCommas(filteredData.length));
      $("#metric_rsf").text(fixUp(my_data.total_rsf()));
      root.updateCap();
      return my_map.update(filteredData);
    };
    root.updateCap = function() {
      return $("#metric_cap_value").text("$" + fixUp(my_data.total_cap_value()));
    };
    $(root).bind('filterupdate', update);
    plotData("#map", [], my_map);
    setOpExpense = function(event, parentID, values) {
      my_data.opExpense(values[0]);
      return root.updateCap();
    };
    setCapRate = function(event, parentID, values) {
      my_data.capRate(values[0]);
      return root.updateCap();
    };
    $("#select_op_expense").selectToUISlider({
      labels: 0,
      callback: 'set_op_expense',
      every: 1
    });
    $(root).bind('set_op_expense', setOpExpense);
    $("#select_cap_rate").selectToUISlider({
      labels: 0,
      callback: 'set_cap_rate',
      every: 1
    });
    $(root).bind('set_cap_rate', setCapRate);
    $(".icon-question-sign").tooltip();
    display = function(data) {
      my_data(data);
      return update();
    };
    return d3.csv("data/property_data.csv", display);
  });

}).call(this);
